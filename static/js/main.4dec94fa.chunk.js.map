{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Navigation","className","href","Footer","generateRandomPoint","center","radius","increment","x0","coords","longitude","y0","latitude","rd","u","Math","random","v","w","sqrt","t","PI","x","cos","y","sin","xp","location","lat","lng","App","useState","setCenter","setLat","setLng","setRadius","count","setCount","locations","setLoc","useEffect","points","i","push","generateRandomPoints","onSubmit","event","preventDefault","isNaN","parseInt","alert","type","placeholder","onChange","target","value","onClick","navigator","geolocation","getCurrentPosition","position","length","map","current","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMA+GA,SAASA,IACP,OACE,sBAAKC,UAAU,gDAAf,UACE,oBAAIA,UAAU,0BAAd,8BACA,mBACEA,UAAU,0BACVC,KAAK,+BAFP,yBAUN,SAASC,IACP,OACE,yBAAQF,UAAU,2BAAlB,UACE,8CACe,mBAAGC,KAAK,gCAAR,2BACV,IAHP,IAKE,0DAC4B,IAC1B,mBAAGA,KAAK,kCAAR,2BAMR,SAASE,EAAoBC,EAAQC,EAAQC,GAC3C,IAAIC,EAAKH,EAAOI,OAAOC,UACnBC,EAAKN,EAAOI,OAAOG,SAEnBC,EAAKP,EAAS,OAEdQ,EAAIC,KAAKC,SACTC,EAAIF,KAAKC,SAETE,EAAIL,EAAKE,KAAKI,KAAKL,GACnBM,EAAI,EAAIL,KAAKM,GAAKJ,EAClBK,EAAIJ,EAAIH,KAAKQ,IAAIH,GACjBI,EAAIN,EAAIH,KAAKU,IAAIL,GAEjBM,EAAKJ,EAAIP,KAAKQ,IAAIZ,GAGtB,MAAO,CAAEgB,SAAS,YAAD,OAAcpB,GAAaqB,IAAKJ,EAAIb,EAAIkB,IAAKH,EAAKlB,GAWtDsB,MArKf,WAAgB,IAAD,EACeC,mBAAS,CACnCtB,OAAQ,CACNC,UAAW,GACXE,SAAU,MAJD,mBACNP,EADM,KACE2B,EADF,OAQSD,mBAAS,IARlB,mBAQNH,EARM,KAQDK,EARC,OASSF,mBAAS,IATlB,mBASNF,EATM,KASDK,EATC,OAUeH,mBAAS,KAVxB,mBAUNzB,EAVM,KAUE6B,EAVF,OAWaJ,mBAAS,IAXtB,mBAWNK,EAXM,KAWCC,EAXD,OAYeN,mBAAS,IAZxB,mBAYNO,EAZM,KAYKC,EAZL,KAiCb,OAJAC,qBAAU,WACRD,EA+HJ,SAA8BlC,EAAQC,EAAQ8B,GAE5C,IADA,IAAIK,EAAS,GACJC,EAAI,EAAGA,EAAIN,EAAOM,IACzBD,EAAOE,KAAKvC,EAAoBC,EAAQC,EAAQoC,IAElD,OAAOD,EApIEG,CAAqBvC,EAAQC,EAAQ8B,MAC3C,CAAC/B,EAAQC,EAAQ8B,IAGlB,qCACE,cAACpC,EAAD,IACA,sBAAKC,UAAU,OAAf,UACE,oBAAIA,UAAU,cAAd,kEAGA,uBACEA,UAAU,sCACV4C,SA5BR,SAAsBC,GACpBA,EAAMC,kBAEDC,MAAMpB,IAAQoB,MAAMnB,GACvBG,EAAU,CACRvB,OAAQ,CACNC,UAAWuC,SAASpB,EAAI,IACxBjB,SAAUqC,SAASrB,EAAI,OAI3BsB,MAAM,kBAeJ,UAIE,uBACEjD,UAAU,8CACVkD,KAAK,OACLC,YAAY,sCACZC,SAAU,SAACP,GAAD,OAAWX,EAAUW,EAAMQ,OAAOC,UAE9C,uBACEtD,UAAU,8CACVkD,KAAK,OACLC,YAAY,kCACZC,SAAU,SAACP,GAAD,OAAWT,EAASS,EAAMQ,OAAOC,UAE7C,uBACEtD,UAAU,yCACVkD,KAAK,OACLC,YAAY,iBACZC,SAAU,SAACP,GAAD,OAAWb,EAAOa,EAAMQ,OAAOC,UAE3C,uBACEtD,UAAU,yCACVkD,KAAK,OACLC,YAAY,kBACZC,SAAU,SAACP,GAAD,OAAWZ,EAAOY,EAAMQ,OAAOC,UAE3C,wBACEtD,UAAU,yCACVkD,KAAK,SAFP,uBAOF,wBACElD,UAAU,kEACVuD,QAAS,WACPC,UAAUC,YAAYC,oBAAmB,SAACC,GACxC5B,EAAU4B,OAJhB,8CAWA,mBAAG3D,UAAU,cAAb,SACII,EAAOI,OAAOG,SAAf,UAEMP,EAAOI,OAAOG,SAFpB,aAEiCP,EAAOI,OAAOC,WAD5C,QAKR,qBACET,UACE,uDACsB,IAArBqC,EAAUuB,OAAe,UAAY,IAH1C,SAMGvB,EAAUwB,KAAI,SAACC,GAAD,OACb,sDAAuBA,EAAQpC,SAA/B,uBAAsDoC,EAAQnC,IAA9D,uBAAgFmC,EAAQlC,IAAxF,cAGJ,cAAC1B,EAAD,QC9FS6D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.4dec94fa.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./index.css\";\n\nfunction App() {\n  const [center, setCenter] = useState({\n    coords: {\n      longitude: \"\",\n      latitude: \"\",\n    },\n  });\n\n  const [lat, setLat] = useState(\"\");\n  const [lng, setLng] = useState(\"\");\n  const [radius, setRadius] = useState(1000);\n  const [count, setCount] = useState(10);\n  const [locations, setLoc] = useState([]);\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    if (!isNaN(lat) & !isNaN(lng)) {\n      setCenter({\n        coords: {\n          longitude: parseInt(lng,10),\n          latitude: parseInt(lat,10),\n        },\n      });\n    } else {\n      alert(\"Enter Numbers\");\n    }\n  }\n\n  useEffect(() => {\n    setLoc(generateRandomPoints(center, radius, count));\n  }, [center, radius, count]);\n\n  return (\n    <>\n      <Navigation />\n      <div className=\"my-3\">\n        <h1 className=\"text-center\">\n          This app generates random geo coordinates around you\n        </h1>\n        <form\n          className=\"flex-row md:flex justify-center m-3\"\n          onSubmit={handleSubmit}\n        >\n          <input\n            className=\"text-center border-2 border-black mx-2 w-80\"\n            type=\"text\"\n            placeholder=\"Enter Radius ( Default : 1000/1km )\"\n            onChange={(event) => setRadius(event.target.value)}\n          />\n          <input\n            className=\"text-center border-2 border-black mx-2 w-80\"\n            type=\"text\"\n            placeholder=\"Enter How much ( Default : 10 )\"\n            onChange={(event) => setCount(event.target.value)}\n          />\n          <input\n            className=\"text-center border-2 border-black mx-2\"\n            type=\"text\"\n            placeholder=\"Enter Latitude\"\n            onChange={(event) => setLat(event.target.value)}\n          />\n          <input\n            className=\"text-center border-2 border-black mx-2\"\n            type=\"text\"\n            placeholder=\"Enter Longitude\"\n            onChange={(event) => setLng(event.target.value)}\n          />\n          <button\n            className=\"text-center bg-gray-300 p-2 rounded-lg\"\n            type=\"submit\"\n          >\n            Submit\n          </button>\n        </form>\n        <button\n          className=\"text-center mx-auto block p-2 rounded-lg bg-gray-600 text-white\"\n          onClick={() => {\n            navigator.geolocation.getCurrentPosition((position) => {\n              setCenter(position);\n              // setLoc(generateRandomPoints(center, radius, count))\n            });\n          }}\n        >\n          Or Press me for current location\n        </button>\n        <p className=\"text-center\">\n          {!center.coords.latitude\n            ? \"\"\n            : `${center.coords.latitude}, ${center.coords.longitude}`}\n        </p>\n      </div>\n\n      <div\n        className={\n          `bg-gray-200 border-2 border-black container mx-auto` +\n          (locations.length === 0 ? \" hidden\" : \"\")\n        }\n      >\n        {locations.map((current) => (\n          <div>{`{\"location\": \"${current.location}\", \"lat\" : \"${current.lat}\", \"lng\" : \"${current.lng}\"},`}</div>\n        ))}\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nfunction Navigation() {\n  return (\n    <nav className=\"flex justify-between items-center bg-gray-800\">\n      <h1 className=\"text-4xl text-white p-3\">Coords Generator</h1>\n      <a\n        className=\"text-2xl text-white p-3\"\n        href=\"https://urdreamboi.github.io\"\n      >\n        backhome\n      </a>\n    </nav>\n  );\n}\n\nfunction Footer() {\n  return (\n    <footer className=\"flex justify-center my-3\">\n      <p>\n        Created By : <a href=\"https://github.com/urdreamboi\">urdreamboi</a>\n      </p>{\" \"}\n      |\n      <p>\n        Coordinate Algorithm by :{\" \"}\n        <a href=\"https://gist.github.com/mkhatib\">mkhatib</a>\n      </p>\n    </footer>\n  );\n}\n\nfunction generateRandomPoint(center, radius, increment) {\n  var x0 = center.coords.longitude;\n  var y0 = center.coords.latitude;\n  // Convert Radius from meters to degrees.\n  var rd = radius / 111300;\n\n  var u = Math.random();\n  var v = Math.random();\n\n  var w = rd * Math.sqrt(u);\n  var t = 2 * Math.PI * v;\n  var x = w * Math.cos(t);\n  var y = w * Math.sin(t);\n\n  var xp = x / Math.cos(y0);\n\n  // Resulting point.\n  return { location: `Location ${increment}`, lat: y + y0, lng: xp + x0 };\n}\n\nfunction generateRandomPoints(center, radius, count) {\n  var points = [];\n  for (var i = 0; i < count; i++) {\n    points.push(generateRandomPoint(center, radius, i));\n  }\n  return points;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}