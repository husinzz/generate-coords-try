{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Navigation","className","href","generateRandomPoint","center","radius","increment","x0","coords","longitude","y0","latitude","rd","u","Math","random","v","w","sqrt","t","PI","x","cos","y","sin","xp","App","useState","setCenter","lat","setLat","lng","setLng","locations","setLoc","onSubmit","event","preventDefault","isNaN","alert","type","placeholder","onChange","target","value","onClick","navigator","geolocation","getCurrentPosition","position","count","points","i","push","generateRandomPoints","console","log","map","current","location","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAgEA,SAASA,IACR,OACC,sBAAKC,UAAU,gDAAf,UACC,oBAAIA,UAAU,0BAAd,8BACA,mBACCA,UAAU,0BACVC,KAAK,+BAFN,yBAUH,SAASC,EAAoBC,EAAQC,EAAQC,GAC3C,IAAIC,EAAKH,EAAOI,OAAOC,UACnBC,EAAKN,EAAOI,OAAOG,SAEnBC,EAAKP,EAAO,OAEZQ,EAAIC,KAAKC,SACTC,EAAIF,KAAKC,SAETE,EAAIL,EAAKE,KAAKI,KAAKL,GACnBM,EAAI,EAAIL,KAAKM,GAAKJ,EAClBK,EAAIJ,EAAIH,KAAKQ,IAAIH,GACjBI,EAAIN,EAAIH,KAAKU,IAAIL,GAEjBM,EAAKJ,EAAEP,KAAKQ,IAAIZ,GAIpB,MAAO,CAAC,4BAAyBJ,GAAY,IAAOiB,EAAEb,EAAI,IAAOe,EAAGlB,GAWvDmB,MAxGf,WAAgB,IAAD,EACeC,mBAAS,CACrCnB,OAAQ,CACPC,UAAW,GACXE,SAAU,MAJE,mBACNP,EADM,KACEwB,EADF,OAQSD,mBAAS,IARlB,mBAQNE,EARM,KAQDC,EARC,OASSH,mBAAS,IATlB,mBASNI,EATM,KASDC,EATC,OAUeL,mBAAS,IAVxB,mBAUNM,EAVM,KAUKC,EAVL,KA4Bb,OACE,qCACA,cAAClC,EAAD,IACA,sBAAKC,UAAU,OAAf,UACE,oBAAIA,UAAU,cAAd,kEACA,uBAAMA,UAAU,0BAA0BkC,SArB9C,SAAsBC,GACpBA,EAAMC,kBAEDC,MAAMT,IAAQS,MAAMP,GACvBH,EAAU,CACRpB,OAAQ,CACNC,UAAWsB,EACXpB,SAAUkB,KAIdU,MAAM,kBAUN,UACE,uBAAOtC,UAAU,yCAAyCuC,KAAK,OAAOC,YAAY,iBAAiBC,SAAU,SAACN,GAAD,OAAWN,EAAOM,EAAMO,OAAOC,UAC5I,uBAAO3C,UAAU,yCAAyCuC,KAAK,OAAOC,YAAY,kBAAkBC,SAAU,SAACN,GAAD,OAAWJ,EAAOI,EAAMO,OAAOC,UAC7I,wBAAQ3C,UAAU,yCAAyCuC,KAAK,SAAhE,uBAEF,wBAAQvC,UAAU,kEAAkE4C,QAAS,WAC3FC,UAAUC,YAAYC,oBAAmB,SAACC,GACxCrB,EAAUqB,MAGZf,EAqDR,SAA8B9B,EAAQC,EAAQ6C,GAE5C,IADA,IAAIC,EAAS,GACJC,EAAE,EAAGA,EAAEF,EAAOE,IACrBD,EAAOE,KAAKlD,EAAoBC,EAAQC,EAAQ+C,IAElD,OAAOD,EA1DMG,CAAqBlD,EAAQ,IAAQ,MAC5CmD,QAAQC,IAAIvB,IANd,8CAUA,mBAAGhC,UAAU,cAAb,SAA6BG,EAAOI,OAAOG,SAAf,UAAkCP,EAAOI,OAAOG,SAAhD,aAA6DP,EAAOI,OAAOC,WAAjD,QAGxD,qBAAKR,UAAU,GAAf,SAEE,qBAAKA,UAAU,oCAAf,SACGgC,EAAUwB,KAAI,SAACC,GAAD,OAAa,mDAAoBA,EAAQC,SAA5B,mBAA+CD,EAAQ7B,IAAvD,mBAAqE6B,EAAQ3B,IAA7E,mBC7CrB6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.bdfe6611.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./index.css\"\n\nfunction App() {\n  const [center, setCenter] = useState({\n\t\tcoords: {\n\t\t\tlongitude: \"\",\n\t\t\tlatitude: \"\",\n\t\t},\n\t})\n\n  const [lat, setLat] = useState(\"\")\n  const [lng, setLng] = useState(\"\")\n  const [locations, setLoc] = useState([])\n\n  function handleSubmit(event) {\n    event.preventDefault()\n\n    if (!isNaN(lat) & !isNaN(lng)) {\n      setCenter({\n        coords: {\n          longitude: lng,\n          latitude: lat,\n        },\n      })\n    } else {\n      alert(\"Enter Numbers\")\n    } \n    \n  }\n\n  return (\n    <>\n    <Navigation />\n    <div className=\"my-3\">\n      <h1 className=\"text-center\">This app generates random geo coordinates around you</h1>\n      <form className=\"flex justify-center m-3\" onSubmit={handleSubmit}>\n        <input className=\"text-center border-2 border-black mx-2\" type=\"text\" placeholder=\"Enter Latitude\" onChange={(event) => setLat(event.target.value)} />\n        <input className=\"text-center border-2 border-black mx-2\" type=\"text\" placeholder=\"Enter Longitude\" onChange={(event) => setLng(event.target.value)} />\n        <button className=\"text-center bg-gray-300 p-2 rounded-lg\" type=\"submit\">Submit</button>\n      </form>\n      <button className=\"text-center mx-auto block p-2 rounded-lg bg-gray-600 text-white\" onClick={() => {\n        navigator.geolocation.getCurrentPosition((position) => {\n          setCenter(position);\n        });\n\n        setLoc(generateRandomPoints(center, 100000, 500))\n        console.log(locations)\n      }}>\n        Or Press me for current location\n      </button>\n      <p className=\"text-center\">{!center.coords.latitude ? \"\" : `${center.coords.latitude}, ${center.coords.longitude}`}</p>\n    </div>\n\n    <div className=\"\">\n\n      <div className=\"bg-gray-400 border-2 border-black\">\n        {locations.map((current) => <div>{`{location: ${current.location}, lat : ${current.lat}, lng : ${current.lng}},`}</div>)}\n      </div>\n    </div>\n    </>\n  );\n}\n\nfunction Navigation() {\n\treturn (\n\t\t<nav className=\"flex justify-between items-center bg-gray-800\">\n\t\t\t<h1 className=\"text-4xl text-white p-3\">Coords Generator</h1>\n\t\t\t<a\n\t\t\t\tclassName=\"text-2xl text-white p-3\"\n\t\t\t\thref=\"https://urdreamboi.github.io\"\n\t\t\t>\n\t\t\t\tbackhome\n\t\t\t</a>\n\t\t</nav>\n\t);\n}\n\nfunction generateRandomPoint(center, radius, increment) {\n  var x0 = center.coords.longitude;\n  var y0 = center.coords.latitude;\n  // Convert Radius from meters to degrees.\n  var rd = radius/111300;\n\n  var u = Math.random();\n  var v = Math.random();\n\n  var w = rd * Math.sqrt(u);\n  var t = 2 * Math.PI * v;\n  var x = w * Math.cos(t);\n  var y = w * Math.sin(t);\n\n  var xp = x/Math.cos(y0);\n\n\n  // Resulting point.\n  return {'location' : `Location ${increment}`,'lat': y+y0, 'lng': xp+x0};\n}\n\nfunction generateRandomPoints(center, radius, count) {\n  var points = [];\n  for (var i=0; i<count; i++) {\n    points.push(generateRandomPoint(center, radius, i));\n  }\n  return points;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}